{"version":3,"sources":["config/http.js","services/ContactService.js","components/AddContact.jsx","components/ContactsList.jsx","constants/Navbar.jsx","components/About.jsx","App.js","services/serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","name","exampleReducer","state","action","type","open","size","Error","AddContact","React","useReducer","undefined","dispatch","useState","email","phone_number","blocked","contact","setContact","handleInputChange","event","target","value","className","onClick","Modal","onClose","Header","Content","htmlFor","Input","placeholder","required","onChange","Actions","Button","negative","positive","ContactDataService","then","response","console","log","catch","e","window","location","reload","saveContact","ContactsList","contacts","setContacts","blacklist","setBlacklist","currentContact","setCurrentContact","currentIndex","setCurrentIndex","searchName","setSearchName","useEffect","retrieveContacts","retrieveBlacklist","refreshList","setActiveContact","index","updateBlocked","status","cogoToast","success","position","filter","length","class","map","role","Navbar","href","to","src","width","alt","About","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uQAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,kDACTC,QAAS,CACP,eAAgB,sBC4BL,EA/BA,WACb,OAAOC,EAAKC,IAAI,cA8BH,EA5BO,WACpB,OAAOD,EAAKC,IAAI,wBA2BH,EAxBH,SAAAC,GACV,OAAOF,EAAKC,IAAL,yBAA2BC,KAuBrB,EApBA,SAAAC,GACb,OAAOH,EAAKI,KAAK,YAAaD,IAmBjB,EAhBA,SAACD,EAAIC,GAClB,OAAOH,EAAKK,IAAL,yBAA2BH,GAAMC,IAe3B,EAZA,SAAAD,GACb,OAAOF,EAAKM,OAAL,yBAA8BJ,KAWxB,EARG,WAChB,OAAOF,EAAKM,OAAL,cAOM,EAJI,SAAAC,GACjB,OAAOP,EAAKC,IAAL,yBAA2BM,K,mCC1B9BC,EAAiB,SAACC,EAAOC,GAC7B,OAAQA,EAAOC,MACb,IAAK,QACH,MAAO,CAAEC,MAAM,GACjB,IAAK,OACH,MAAO,CAAEA,MAAM,EAAMC,KAAMH,EAAOG,MACpC,QACE,MAAM,IAAIC,MAAM,2BAkIPC,EA9HI,WAAO,IAAD,EACGC,IAAMC,WAAWT,EAAgB,CACzDI,MAAM,EACNC,UAAMK,IAHe,mBAChBT,EADgB,KACTU,EADS,KAKfP,EAAeH,EAAfG,KAAMC,EAASJ,EAATI,KALS,EAcOO,mBAPF,CAC1BlB,GAAI,KACJK,KAAM,GACNc,MAAO,GACPC,aAAc,GACdC,SAAS,IAZY,mBAchBC,EAdgB,KAcPC,EAdO,KAgBjBC,EAAoB,SAACC,GAAW,IAAD,EACXA,EAAMC,OAAtBrB,EAD2B,EAC3BA,KAAMsB,EADqB,EACrBA,MACdJ,EAAW,2BAAKD,GAAN,kBAAgBjB,EAAOsB,MA0BnC,OACE,gCACE,wBACEC,UAAU,kBACVC,QAAS,kBAAMZ,EAAS,CAAER,KAAM,OAAQE,KAAM,UAFhD,4BAOA,eAACmB,EAAA,EAAD,CACEnB,KAAMA,EACND,KAAMA,EACNqB,QAAS,kBAAMd,EAAS,CAAER,KAAM,WAHlC,UAKE,cAACqB,EAAA,EAAME,OAAP,6BACA,eAACF,EAAA,EAAMG,QAAP,WACE,+BACE,uBAAOL,UAAU,OAAOM,QAAQ,OAAhC,mBAGA,cAACC,EAAA,EAAD,CACEC,YAAY,gBACZ3B,KAAK,OACLT,GAAG,OACHqC,UAAQ,EACRV,MAAOL,EAAQjB,KACfiC,SAAUd,EACVnB,KAAK,YAGT,+BACE,uBAAOuB,UAAU,OAAOM,QAAQ,OAAhC,oBAGA,cAACC,EAAA,EAAD,CACEC,YAAY,iBACZ3B,KAAK,OACLT,GAAG,QACHqC,UAAQ,EACRV,MAAOL,EAAQH,MACfmB,SAAUd,EACVnB,KAAK,aAGT,+BACE,uBAAOuB,UAAU,OAAOM,QAAQ,OAAhC,2BAGA,cAACC,EAAA,EAAD,CACEC,YAAY,wBACZ3B,KAAK,OACLT,GAAG,eACHqC,UAAQ,EACRV,MAAOL,EAAQF,aACfkB,SAAUd,EACVnB,KAAK,uBAIX,eAACyB,EAAA,EAAMS,QAAP,WACE,cAACC,EAAA,EAAD,CACEZ,UAAU,aACVa,UAAQ,EACRZ,QAAS,kBAAMZ,EAAS,CAAER,KAAM,WAHlC,oBAOA,cAAC+B,EAAA,EAAD,CACEE,UAAQ,EACRb,QAAS,WACPZ,EAAS,CAAER,KAAM,UA7FT,WAClB,IAAIR,EAAO,CACTI,KAAMiB,EAAQjB,KACdc,MAAOG,EAAQH,MACfC,aAAcE,EAAQF,cAGxBuB,EAA0B1C,GACvB2C,MAAK,SAACC,GACLtB,EAAW,CACTvB,GAAI6C,EAAS5C,KAAKD,GAClBK,KAAMwC,EAAS5C,KAAKI,KACpBc,MAAO0B,EAAS5C,KAAKkB,MACrBC,aAAcyB,EAAS5C,KAAKmB,aAC5BC,QAASwB,EAAS5C,KAAKoB,UAEzByB,QAAQC,IAAIF,EAAS5C,SAEtB+C,OAAM,SAACC,GACNH,QAAQC,IAAIE,MAEhBC,OAAOC,SAASC,SAyENC,IAJJ,8BCxHJ/C,EAAiB,SAACC,EAAOC,GAC7B,OAAQA,EAAOC,MACb,IAAK,QACH,MAAO,CAAEC,MAAM,GACjB,IAAK,OACH,MAAO,CAAEA,MAAM,EAAMC,KAAMH,EAAOG,MACpC,QACE,MAAM,IAAIC,MAAM,2BA+bP0C,EA3bM,WAAO,IAAD,EACOpC,mBAAS,IADhB,mBAClBqC,EADkB,KACRC,EADQ,OAEStC,mBAAS,IAFlB,mBAElBuC,EAFkB,KAEPC,EAFO,OAGmBxC,mBAAS,MAH5B,mBAGlByC,EAHkB,KAGFC,EAHE,OAIe1C,oBAAU,GAJzB,mBAIlB2C,EAJkB,KAIJC,EAJI,OAKW5C,mBAAS,IALpB,mBAKlB6C,EALkB,KAKNC,EALM,KAOzBC,qBAAU,WACRC,IACAC,MACC,IAVsB,MAYCrD,IAAMC,WAAWT,EAAgB,CACzDI,MAAM,EACNC,UAAMK,IAdiB,mBAYlBT,EAZkB,KAYXU,EAZW,KAgBjBP,EAAeH,EAAfG,KAAMC,EAASJ,EAATI,KAORuD,EAAmB,WACvBvB,IACGC,MAAK,SAACC,GACLW,EAAYX,EAAS5C,MACrB6C,QAAQC,IAAIF,EAAS5C,SAEtB+C,OAAM,SAACC,GACNH,QAAQC,IAAIE,OAIZkB,EAAoB,WACxBxB,IACGC,MAAK,SAACC,GACLa,EAAab,EAAS5C,MACtB6C,QAAQC,IAAIF,EAAS5C,SAEtB+C,OAAM,SAACC,GACNH,QAAQC,IAAIE,OAIZmB,EAAc,WAClBF,IACAC,IACAP,EAAkB,MAClBE,GAAiB,IAGbO,EAAmB,SAAC/C,EAASgD,GACjCR,EAAgBQ,GAEhB3B,EAAuBrB,EAAQtB,IAC5B4C,MAAK,SAACC,GACLe,EAAkBf,EAAS5C,MAC3B6C,QAAQC,IAAIF,EAAS5C,SAEtB+C,OAAM,SAACC,GACNH,QAAQC,IAAIE,OAIZzB,EAAoB,SAACC,GAAW,IAAD,EACXA,EAAMC,OAAtBrB,EAD2B,EAC3BA,KAAMsB,EADqB,EACrBA,MACdiC,EAAkB,2BAAKD,GAAN,kBAAuBtD,EAAOsB,MAgB3C4C,EAAgB,SAACC,GACrB7B,EAA0BgB,EAAe3D,GAAI,CAAEqB,QAASmD,IACrD5B,MAAK,SAACC,GACLe,EAAkB,2BAAKD,GAAN,IAAsBtC,QAASmD,KAEhDC,IAAUC,QAAQ,yCADF,CAAEC,SAAU,cAE5B7B,QAAQC,IAAIF,EAAS5C,MACrBmE,OAEDpB,OAAM,SAACC,GACNH,QAAQC,IAAIE,OAiCZ5B,EAAUkC,EAASqB,QAAO,SAACtD,GAAD,OAAcA,EAAQD,WAatD,OACE,sBAAKO,UAAU,OAAf,UACE,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,WAAf,SACE,cAAC,EAAD,MAEF,qBAAKA,UAAU,WAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,uBACEnB,KAAK,OACLmB,UAAU,eACVQ,YAAY,iBACZT,MAAOoC,EACPzB,SAtIe,SAACW,GAC1B,IAAMc,EAAad,EAAEvB,OAAOC,MAC5BqC,EAAcD,MAsIN,qBAAKnC,UAAU,qBAAf,SACE,wBACEA,UAAU,4BACVnB,KAAK,SACLoB,QA9BK,WACjBc,EAA8BoB,GAC3BnB,MAAK,SAACC,GACLW,EAAYX,EAAS5C,MACrB6C,QAAQC,IAAIF,EAAS5C,SAEtB+C,OAAM,SAACC,GACNH,QAAQC,IAAIE,OAoBN,2BAUN,sBAAKrB,UAAU,WAAf,UACE,sBACEA,UAAU,oCACVC,QAAS,kBAAMZ,EAAS,CAAER,KAAM,OAAQE,KAAM,UAFhD,wBAMA,eAACmB,EAAA,EAAD,CACEnB,KAAMA,EACND,KAAMA,EACNqB,QAAS,kBAAMd,EAAS,CAAER,KAAM,WAHlC,UAKE,cAACqB,EAAA,EAAME,OAAP,kCACCuB,EAASsB,OAAS,EACjB,qCACE,cAAC/C,EAAA,EAAMG,QAAP,UACE,gEACiC,mDAGnC,eAACH,EAAA,EAAMS,QAAP,WACE,cAACC,EAAA,EAAD,CACEZ,UAAU,aACVa,UAAQ,EACRZ,QAAS,kBAAMZ,EAAS,CAAER,KAAM,WAHlC,oBAOA,cAAC+B,EAAA,EAAD,CACEE,UAAQ,EACRb,QAAS,WACPZ,EAAS,CAAER,KAAM,UAlGnCkC,IACGC,MAAK,SAACC,GAEL4B,IAAUC,QACR,+CAFc,CAAEC,SAAU,cAK5B7B,QAAQC,IAAIF,EAAS5C,MACrBmE,OAEDpB,OAAM,SAACC,GACNH,QAAQC,IAAIE,OAoFF,8BAYJ,qCACE,cAACnB,EAAA,EAAMG,QAAP,UACE,0CACW,gDAGb,cAACH,EAAA,EAAMS,QAAP,UACE,cAACC,EAAA,EAAD,CAAQC,UAAQ,EAACZ,QAAS,kBAAMZ,EAAS,CAAER,KAAM,WAAjD,kCASZ,sBAAKmB,UAAU,gBAAf,UACE,sBAAKA,UAAU,WAAf,UACE,2CAEE,sBAAMkD,MAAM,+CAAZ,SACGrB,EAAUoB,YAGf,oBAAIjD,UAAU,aAAd,SACG6B,GACCA,EAAUsB,KAAI,SAACzD,EAASgD,GAAV,OACZ,oBACE1C,UACE,qBACE0C,IAAUT,EAAe,SAAW,IAExChC,QAAS,kBAAMwC,EAAiB/C,GAAUgD,IAL5C,SAQGhD,EAAQjB,MAFJiE,WAOdP,EACC,sBAAKnC,UAAU,WAAf,UACE,wCAAW2B,EAASsB,OAApB,eACA,oBAAIjD,UAAU,aAAd,SACG2B,GACCA,EAASwB,KAAI,SAACzD,EAASgD,GAAV,OACX,oBACE1C,UACE,oBACC0C,IAAUT,EAAe,SAAW,IAEvChC,QAAS,kBAAMwC,EAAiB/C,EAASgD,IAL3C,SAQGhD,EAAQjB,MAFJiE,WAQf,sBAAK1C,UAAU,WAAf,UACE,0CAEE,sBAAMkD,MAAM,+CAAZ,SACGzD,EAAQwD,YAGb,oBAAIjD,UAAU,aAAd,SACG2B,GACCA,EAASwB,KACP,SAACzD,EAASgD,GAAV,OACGhD,EAAQD,SACP,oBACEO,UACE,oBACC0C,IAAUT,EAAe,SAAW,IAEvChC,QAAS,kBAAMwC,EAAiB/C,EAASgD,IAL3C,SAQGhD,EAAQjB,MAFJiE,WASrB,qBAAK1C,UAAU,WAAf,SACG+B,EACC,qBAAK/B,UAAU,OAAf,SACE,qBAAKA,UAAU,YAAf,SACE,gCACE,yCACA,gCACE,gCACE,6CACO,IACR+B,EAAetD,QAElB,gCACE,gCACE,8CACO,IACRsD,EAAexC,SAElB,gCACE,gCACE,qDACO,IACRwC,EAAevC,gBAElB,gCACE,gCACE,+CACO,IACRuC,EAAetC,QAAU,UAAY,YAGvCsC,EAAe3D,GACd,qCACE,sBACE4B,UAAU,sBACVoD,KAAK,SACLnD,QAAS,kBAAMZ,EAAS,CAAER,KAAM,OAAQE,KAAM,UAHhD,kBAQA,eAACmB,EAAA,EAAD,CACEnB,KAAMA,EACND,KAAMA,EACNqB,QAAS,kBAAMd,EAAS,CAAER,KAAM,WAHlC,UAKE,cAACqB,EAAA,EAAME,OAAP,2BACA,eAACF,EAAA,EAAMG,QAAP,WACE,+BACE,uBAAOL,UAAU,OAAOM,QAAQ,OAAhC,mBAGA,cAACC,EAAA,EAAD,CACEC,YAAY,gBACZ3B,KAAK,OACLT,GAAG,OACHK,KAAK,OACLsB,MAAOgC,EAAetD,KACtBiC,SAAUd,OAGd,+BACE,uBAAOI,UAAU,OAAOM,QAAQ,OAAhC,oBAGA,cAACC,EAAA,EAAD,CACEC,YAAY,iBACZ3B,KAAK,OACLT,GAAG,QACHK,KAAK,QACLsB,MAAOgC,EAAexC,MACtBmB,SAAUd,OAGd,+BACE,uBAAOI,UAAU,OAAOM,QAAQ,OAAhC,2BAGA,cAACC,EAAA,EAAD,CACEC,YAAY,wBACZ3B,KAAK,OACLT,GAAG,eACHK,KAAK,eACLsB,MAAOgC,EAAevC,aACtBkB,SAAUd,UAIhB,eAACM,EAAA,EAAMS,QAAP,WACE,cAACC,EAAA,EAAD,CACEZ,UAAU,aACVa,UAAQ,EACRZ,QAAS,kBAAMZ,EAAS,CAAER,KAAM,WAHlC,oBAOA,cAAC+B,EAAA,EAAD,CACEE,UAAQ,EACRb,QAAS,WACPZ,EAAS,CAAER,KAAM,UAhU3CkC,EAA0BgB,EAAe3D,GAAI2D,GAC1Cf,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAAS5C,MAErBwE,IAAUC,QAAQ,yCADF,CAAEC,SAAU,cAE5BP,OAEDpB,OAAM,SAACC,GACNH,QAAQC,IAAIE,OAqTM,2BAaN,yBAGDU,EAAetC,QACd,sBACEO,UAAU,2BACVoD,KAAK,SACLnD,QAAS,kBAAM0C,GAAc,IAH/B,qBAQA,sBACE3C,UAAU,2BACVoD,KAAK,SACLnD,QAAS,kBAAM0C,GAAc,IAH/B,mBASF,sBACE3C,UAAU,qBACVoD,KAAK,SACLnD,QAxTI,WACpBc,EAA0BgB,EAAe3D,IACtC4C,MAAK,SAACC,GAEL4B,IAAUC,QAAQ,wCADF,CAAEC,SAAU,cAE5B7B,QAAQC,IAAIF,EAAS5C,MACrBmE,OAEDpB,OAAM,SAACC,GACNH,QAAQC,IAAIE,OA4SF,2BAWN,8BACE,wEC3ZCgC,EArCA,WACb,OACE,8BACE,sBAAKrD,UAAU,8CAAf,UACE,mBAAGsD,KAAK,YAAYtD,UAAU,eAA9B,0BAGA,qBAAIA,UAAU,qBAAd,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMuD,GAAI,IAAKvD,UAAU,WAAzB,oBAIF,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMuD,GAAI,SAAUvD,UAAU,WAA9B,wBAKJ,oBAAIA,UAAU,8BAAd,SACE,oBAAIA,UAAU,wBAAd,SACE,eAAC,IAAD,CAAMuD,GAAI,YAAavD,UAAU,kBAAjC,UACE,qBACEA,UAAU,sBACVwD,IAAI,iFACJC,MAAM,KACNC,IAAI,WALR,yBCSGC,EA9BD,WACZ,OACE,8BACE,qBAAK3D,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,aACf,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,YAAd,0BACA,mBAAGA,UAAU,OAAb,uKAKA,oBAAIA,UAAU,SACd,oDACA,mBAAGA,UAAU,mBAAb,SACE,cAAC,IAAD,CAAMA,UAAU,yBAAyBuD,GAAG,IAAIH,KAAK,SAArD,kCAMN,qBAAKpD,UAAU,qBCLV4D,EAZH,WACV,OACE,gCACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,CAAC,IAAK,aAAcC,UAAWrC,IAClD,cAAC,IAAD,CAAOmC,OAAK,EAACC,KAAM,SAAUC,UAAWJ,WCH5BK,QACW,cAA7B1C,OAAOC,SAAS0C,UAEe,UAA7B3C,OAAOC,SAAS0C,UAEhB3C,OAAOC,SAAS0C,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdvD,OAAM,SAAAwD,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.32548610.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://address-book-api-2021.herokuapp.com/api\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});\n","import http from \"../config/http\";\n\nconst getAll = () => {\n  return http.get(\"/contacts\");\n};\nconst getAllBlocked = () => {\n  return http.get(\"/contacts/blacklist\");\n};\n\nconst get = id => {\n  return http.get(`/contacts/user/${id}`);\n};\n\nconst create = data => {\n  return http.post(\"/contacts\", data);\n};\n\nconst update = (id, data) => {\n  return http.put(`/contacts/user/${id}`, data);\n};\n\nconst remove = id => {\n  return http.delete(`/contacts/user/${id}`);\n};\n\nconst removeAll = () => {\n  return http.delete(`/contacts`);\n};\n\nconst findByName = name => {\n  return http.get(`/contacts?name=${name}`);\n};\n\nexport default {\n  getAll,\n  getAllBlocked,\n  get,\n  create,\n  update,\n  remove,\n  removeAll,\n  findByName\n};\n","import React, { useState } from \"react\";\nimport { Button, Modal, Input } from \"semantic-ui-react\";\nimport ContactDataService from \"../services/ContactService\";\n\nconst exampleReducer = (state, action) => {\n  switch (action.type) {\n    case \"close\":\n      return { open: false };\n    case \"open\":\n      return { open: true, size: action.size };\n    default:\n      throw new Error(\"Unsupported action...\");\n  }\n};\n\nconst AddContact = () => {\n  const [state, dispatch] = React.useReducer(exampleReducer, {\n    open: false,\n    size: undefined,\n  });\n  const { open, size } = state;\n\n  const initialContactState = {\n    id: null,\n    name: \"\",\n    email: \"\",\n    phone_number: \"\",\n    blocked: false,\n  };\n  const [contact, setContact] = useState(initialContactState);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setContact({ ...contact, [name]: value });\n  };\n\n  const saveContact = () => {\n    var data = {\n      name: contact.name,\n      email: contact.email,\n      phone_number: contact.phone_number,\n    };\n\n    ContactDataService.create(data)\n      .then((response) => {\n        setContact({\n          id: response.data.id,\n          name: response.data.name,\n          email: response.data.email,\n          phone_number: response.data.phone_number,\n          blocked: response.data.blocked,\n        });\n        console.log(response.data);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n    window.location.reload();\n  };\n  return (\n    <div>\n      <button\n        className=\"btn btn-primary\"\n        onClick={() => dispatch({ type: \"open\", size: \"tiny\" })}\n      >\n        Create Contact\n      </button>\n\n      <Modal\n        size={size}\n        open={open}\n        onClose={() => dispatch({ type: \"close\" })}\n      >\n        <Modal.Header>Create Contact</Modal.Header>\n        <Modal.Content>\n          <h5>\n            <label className=\"mr-3\" htmlFor=\"name\">\n              Name:\n            </label>\n            <Input\n              placeholder=\"Enter name...\"\n              type=\"text\"\n              id=\"name\"\n              required\n              value={contact.name}\n              onChange={handleInputChange}\n              name=\"name\"\n            />\n          </h5>\n          <h5>\n            <label className=\"mr-3\" htmlFor=\"name\">\n              Email:\n            </label>\n            <Input\n              placeholder=\"Enter email...\"\n              type=\"text\"\n              id=\"email\"\n              required\n              value={contact.email}\n              onChange={handleInputChange}\n              name=\"email\"\n            />\n          </h5>\n          <h5>\n            <label className=\"mr-3\" htmlFor=\"name\">\n              Phone Number:\n            </label>\n            <Input\n              placeholder=\"Enter phone number...\"\n              type=\"text\"\n              id=\"phone_number\"\n              required\n              value={contact.phone_number}\n              onChange={handleInputChange}\n              name=\"phone_number\"\n            />\n          </h5>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            className=\"float-left\"\n            negative\n            onClick={() => dispatch({ type: \"close\" })}\n          >\n            Cancel\n          </Button>\n          <Button\n            positive\n            onClick={() => {\n              dispatch({ type: \"close\" });\n              saveContact();\n            }}\n          >\n            Create\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    </div>\n  );\n};\n\nexport default AddContact;\n","import React, { useState, useEffect } from \"react\";\nimport ContactDataService from \"../services/ContactService\";\nimport { Button, Modal, Input } from \"semantic-ui-react\";\nimport cogoToast from \"cogo-toast\";\nimport AddContact from \"./AddContact\";\n\nconst exampleReducer = (state, action) => {\n  switch (action.type) {\n    case \"close\":\n      return { open: false };\n    case \"open\":\n      return { open: true, size: action.size };\n    default:\n      throw new Error(\"Unsupported action...\");\n  }\n};\n\nconst ContactsList = () => {\n  const [contacts, setContacts] = useState([]);\n  const [blacklist, setBlacklist] = useState([]);\n  const [currentContact, setCurrentContact] = useState(null);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n  const [searchName, setSearchName] = useState(\"\");\n\n  useEffect(() => {\n    retrieveContacts();\n    retrieveBlacklist();\n  }, []);\n\n  const [state, dispatch] = React.useReducer(exampleReducer, {\n    open: false,\n    size: undefined,\n  });\n  const { open, size } = state;\n\n  const onChangeSearchName = (e) => {\n    const searchName = e.target.value;\n    setSearchName(searchName);\n  };\n\n  const retrieveContacts = () => {\n    ContactDataService.getAll()\n      .then((response) => {\n        setContacts(response.data);\n        console.log(response.data);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n\n  const retrieveBlacklist = () => {\n    ContactDataService.getAllBlocked()\n      .then((response) => {\n        setBlacklist(response.data);\n        console.log(response.data);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n\n  const refreshList = () => {\n    retrieveContacts();\n    retrieveBlacklist();\n    setCurrentContact(null);\n    setCurrentIndex(-1);\n  };\n\n  const setActiveContact = (contact, index) => {\n    setCurrentIndex(index);\n\n    ContactDataService.get(contact.id)\n      .then((response) => {\n        setCurrentContact(response.data);\n        console.log(response.data);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setCurrentContact({ ...currentContact, [name]: value });\n  };\n\n  const updateContact = () => {\n    ContactDataService.update(currentContact.id, currentContact)\n      .then((response) => {\n        console.log(response.data);\n        const options = { position: \"top-right\" };\n        cogoToast.success(\"Contact has been updated successfully!\", options);\n        refreshList();\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n\n  const updateBlocked = (status) => {\n    ContactDataService.update(currentContact.id, { blocked: status })\n      .then((response) => {\n        setCurrentContact({ ...currentContact, blocked: status });\n        const options = { position: \"top-right\" };\n        cogoToast.success(\"Contact has been updated successfully!\", options);\n        console.log(response.data);\n        refreshList();\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n\n  const removeAllContacts = () => {\n    ContactDataService.removeAll()\n      .then((response) => {\n        const options = { position: \"top-right\" };\n        cogoToast.success(\n          \"All Contacts have been deleted successfully!\",\n          options\n        );\n        console.log(response.data);\n        refreshList();\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n\n  const deleteContact = () => {\n    ContactDataService.remove(currentContact.id)\n      .then((response) => {\n        const options = { position: \"top-right\" };\n        cogoToast.success(\"Contact has been delete successfully!\", options);\n        console.log(response.data);\n        refreshList();\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n\n  const blocked = contacts.filter((contact) => !contact.blocked);\n\n  const findByName = () => {\n    ContactDataService.findByName(searchName)\n      .then((response) => {\n        setContacts(response.data);\n        console.log(response.data);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n\n  return (\n    <div className=\"mt-4\">\n      <div className=\"row mx-2\">\n        <div className=\"col-md-3\">\n          <AddContact />\n        </div>\n        <div className=\"col-md-5\">\n          <div className=\"input-group mb-3\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Search by name\"\n              value={searchName}\n              onChange={onChangeSearchName}\n            />\n            <div className=\"input-group-append\">\n              <button\n                className=\"btn btn-outline-secondary\"\n                type=\"button\"\n                onClick={findByName}\n              >\n                Search\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-md-4\">\n          <span\n            className=\"btn btn-sm btn-danger float-right\"\n            onClick={() => dispatch({ type: \"open\", size: \"mini\" })}\n          >\n            Remove All\n          </span>\n          <Modal\n            size={size}\n            open={open}\n            onClose={() => dispatch({ type: \"close\" })}\n          >\n            <Modal.Header>Delete all Contacts</Modal.Header>\n            {contacts.length > 0 ? (\n              <>\n                <Modal.Content>\n                  <p>\n                    Are you sure you want to delete<b> All Contacts</b>\n                  </p>\n                </Modal.Content>\n                <Modal.Actions>\n                  <Button\n                    className=\"float-left\"\n                    negative\n                    onClick={() => dispatch({ type: \"close\" })}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    positive\n                    onClick={() => {\n                      dispatch({ type: \"close\" });\n                      removeAllContacts();\n                    }}\n                  >\n                    Delete All\n                  </Button>\n                </Modal.Actions>\n              </>\n            ) : (\n              <>\n                <Modal.Content>\n                  <p>\n                    You have <b>0 Contacts</b>\n                  </p>\n                </Modal.Content>\n                <Modal.Actions>\n                  <Button negative onClick={() => dispatch({ type: \"close\" })}>\n                    Cancel\n                  </Button>\n                </Modal.Actions>\n              </>\n            )}\n          </Modal>\n        </div>\n      </div>\n      <div className=\"row mx-2 mt-3\">\n        <div className=\"col-md-3\">\n          <h4>\n            BlackList\n            <span class=\"badge badge-primary badge-sm badge-pill ml-2\">\n              {blacklist.length}\n            </span>\n          </h4>\n          <ul className=\"list-group\">\n            {blacklist &&\n              blacklist.map((contact, index) => (\n                <li\n                  className={\n                    \"list-group-item \" +\n                    (-index === currentIndex ? \"active\" : \"\")\n                  }\n                  onClick={() => setActiveContact(contact, -index)}\n                  key={index}\n                >\n                  {contact.name}\n                </li>\n              ))}\n          </ul>\n        </div>\n        {searchName ? (\n          <div className=\"col-md-5\">\n            <h4>Found {contacts.length} Contacts</h4>\n            <ul className=\"list-group\">\n              {contacts &&\n                contacts.map((contact, index) => (\n                  <li\n                    className={\n                      \"list-group-item \" +\n                      (index === currentIndex ? \"active\" : \"\")\n                    }\n                    onClick={() => setActiveContact(contact, index)}\n                    key={index}\n                  >\n                    {contact.name}\n                  </li>\n                ))}\n            </ul>\n          </div>\n        ) : (\n          <div className=\"col-md-5\">\n            <h4>\n              Contacts\n              <span class=\"badge badge-primary badge-sm badge-pill ml-2\">\n                {blocked.length}\n              </span>\n            </h4>\n            <ul className=\"list-group\">\n              {contacts &&\n                contacts.map(\n                  (contact, index) =>\n                    !contact.blocked && (\n                      <li\n                        className={\n                          \"list-group-item \" +\n                          (index === currentIndex ? \"active\" : \"\")\n                        }\n                        onClick={() => setActiveContact(contact, index)}\n                        key={index}\n                      >\n                        {contact.name}\n                      </li>\n                    )\n                )}\n            </ul>\n          </div>\n        )}\n        <div className=\"col-md-4\">\n          {currentContact ? (\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <div>\n                  <h4>Contact</h4>\n                  <div>\n                    <label>\n                      <strong>Name:</strong>\n                    </label>{\" \"}\n                    {currentContact.name}\n                  </div>\n                  <div>\n                    <label>\n                      <strong>Email:</strong>\n                    </label>{\" \"}\n                    {currentContact.email}\n                  </div>\n                  <div>\n                    <label>\n                      <strong>Phone Number:</strong>\n                    </label>{\" \"}\n                    {currentContact.phone_number}\n                  </div>\n                  <div>\n                    <label>\n                      <strong>Status:</strong>\n                    </label>{\" \"}\n                    {currentContact.blocked ? \"Blocked\" : \"Active\"}\n                  </div>\n\n                  {currentContact.id ? (\n                    <>\n                      <span\n                        className=\"badge badge-primary\"\n                        role=\"button\"\n                        onClick={() => dispatch({ type: \"open\", size: \"tiny\" })}\n                      >\n                        Edit\n                      </span>\n\n                      <Modal\n                        size={size}\n                        open={open}\n                        onClose={() => dispatch({ type: \"close\" })}\n                      >\n                        <Modal.Header>Edit Contact</Modal.Header>\n                        <Modal.Content>\n                          <h5>\n                            <label className=\"mr-3\" htmlFor=\"name\">\n                              Name:\n                            </label>\n                            <Input\n                              placeholder=\"Enter name...\"\n                              type=\"text\"\n                              id=\"name\"\n                              name=\"name\"\n                              value={currentContact.name}\n                              onChange={handleInputChange}\n                            />\n                          </h5>\n                          <h5>\n                            <label className=\"mr-3\" htmlFor=\"name\">\n                              Email:\n                            </label>\n                            <Input\n                              placeholder=\"Enter email...\"\n                              type=\"text\"\n                              id=\"email\"\n                              name=\"email\"\n                              value={currentContact.email}\n                              onChange={handleInputChange}\n                            />\n                          </h5>\n                          <h5>\n                            <label className=\"mr-3\" htmlFor=\"name\">\n                              Phone Number:\n                            </label>\n                            <Input\n                              placeholder=\"Enter phone number...\"\n                              type=\"text\"\n                              id=\"phone_number\"\n                              name=\"phone_number\"\n                              value={currentContact.phone_number}\n                              onChange={handleInputChange}\n                            />\n                          </h5>\n                        </Modal.Content>\n                        <Modal.Actions>\n                          <Button\n                            className=\"float-left\"\n                            negative\n                            onClick={() => dispatch({ type: \"close\" })}\n                          >\n                            Cancel\n                          </Button>\n                          <Button\n                            positive\n                            onClick={() => {\n                              dispatch({ type: \"close\" });\n                              updateContact();\n                            }}\n                          >\n                            Save\n                          </Button>\n                        </Modal.Actions>\n                      </Modal>\n                    </>\n                  ) : (\n                    <span></span>\n                  )}\n\n                  {currentContact.blocked ? (\n                    <span\n                      className=\"badge badge-warning mx-2\"\n                      role=\"button\"\n                      onClick={() => updateBlocked(false)}\n                    >\n                      UnBlock\n                    </span>\n                  ) : (\n                    <span\n                      className=\"badge badge-warning mx-2\"\n                      role=\"button\"\n                      onClick={() => updateBlocked(true)}\n                    >\n                      Block\n                    </span>\n                  )}\n\n                  <span\n                    className=\"badge badge-danger\"\n                    role=\"button\"\n                    onClick={deleteContact}\n                  >\n                    Delete\n                  </span>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div>\n              <p>Please click on a Contact...</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ContactsList;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navbar = () => {\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand navbar-dark bg-primary\">\n        <a href=\"/contacts\" className=\"navbar-brand\">\n          Address Book\n        </a>\n        <ul className=\"navbar-nav mr-auto\">\n          <li className=\"nav-item\">\n            <Link to={\"/\"} className=\"nav-link\">\n              Home\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link to={\"/about\"} className=\"nav-link\">\n              About\n            </Link>\n          </li>\n        </ul>\n        <ul className=\"nav navbar-nav navbar-right\">\n          <li className=\"nav-item navbar-right\">\n            <Link to={\"/contacts\"} className=\"nav-link avatar\">\n              <img\n                className=\"rounded-circle mr-2\"\n                src=\"https://cdn3.iconfinder.com/data/icons/business-avatar-1/512/11_avatar-512.png\"\n                width=\"5%\"\n                alt=\"Avatar\"\n              />\n              Krasivaya\n            </Link>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst About = () => {\n  return (\n    <div>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-1\"></div>\n          <div className=\"col-md-10\">\n            <div className=\"jumbotron\">\n              <h3 className=\"display-3\">Address Book</h3>\n              <p className=\"lead\">\n                This is a simple address book, where you can add and view people\n                in your contact list or blacklist them with a privilege to edit\n                and remove them anytime.\n              </p>\n              <hr className=\"my-4\" />\n              <p>Start using it now!</p>\n              <p className=\"lead text-center\">\n                <Link className=\"btn btn-primary btn-lg\" to=\"/\" role=\"button\">\n                  View Contacts\n                </Link>\n              </p>\n            </div>\n          </div>\n          <div className=\"col-md-1\"></div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default About;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles/App.scss\";\n\nimport ContactsList from \"./components/ContactsList\";\nimport Navbar from \"./constants/Navbar\";\nimport About from \"./components/About\";\n\nconst App = () => {\n  return (\n    <div>\n      <Navbar />\n      <Switch>\n        <Route exact path={[\"/\", \"/contacts\"]} component={ContactsList} />\n        <Route exact path={\"/about\"} component={About} />\n      </Switch>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport 'semantic-ui-css/semantic.min.css'\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./services/serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}